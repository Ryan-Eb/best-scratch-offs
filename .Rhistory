tickets_sold_df <- clean_df %>%
select(Game_number,Game_name,scrape_date,game_age,tickets_sold,ticket_cost,ticket_cost_num) %>%
group_by(scrape_date) %>%
distinct(Game_number, .keep_all = TRUE) %>%
arrange(Game_number,scrape_date) %>%
ungroup() %>%
group_by(Game_number) %>%
mutate(sold_since_last_scrape = tickets_sold - lag(tickets_sold)) %>%
mutate(days_since_last_scrape = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_per_day_since_last_scrape = sold_since_last_scrape/days_since_last_scrape) %>%
ungroup()
#most popular game today
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
arrange(desc(tickets_per_day_since_last_scrape)) %>%
.[1,]
#tickets sold per day since last scrape for each ticket amount
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
group_by(ticket_cost_num) %>%
summarise(tickets_sold_per_day = sum(tickets_per_day_since_last_scrape)) %>%
ungroup() %>%
mutate(total_dollar_spend_on_tickets = ticket_cost_num * tickets_sold_per_day)
#tickets sold per day since last scrape for each ticket amount
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
group_by(ticket_cost_num) %>%
summarise(tickets_sold_per_day = sum(tickets_per_day_since_last_scrape)) %>%
ungroup() %>%
mutate(total_dollar_spend_on_tickets = ticket_cost_num * tickets_sold_per_day) %>%
summarise(mean())
#tickets sold per day since last scrape for each ticket amount
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
group_by(ticket_cost_num) %>%
summarise(tickets_sold_per_day = sum(tickets_per_day_since_last_scrape)) %>%
ungroup() %>%
mutate(total_dollar_spend_on_tickets = ticket_cost_num * tickets_sold_per_day) %>% summarise(tickets = mean(tickets_sold_per_day))
#tickets sold per day since last scrape for each ticket amount
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
group_by(ticket_cost_num) %>%
summarise(tickets_sold_per_day = sum(tickets_per_day_since_last_scrape)) %>%
ungroup() %>%
mutate(total_dollar_spend_on_tickets = ticket_cost_num * tickets_sold_per_day) %>% summarise(tickets = sum(tickets_sold_per_day))
#tickets sold per day total since last scrape
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
group_by(ticket_cost_num) %>%
summarise(tickets_sold_per_day = sum(tickets_per_day_since_last_scrape)) %>%
ungroup() %>%
mutate(total_dollar_spend_on_tickets = ticket_cost_num * tickets_sold_per_day) %>%
summarise(tickets_sold_per_day = sum(tickets_sold_per_day),
total_dollar_spend_on_tickets = sum(total_dollar_spend_on_tickets))
#total spend on scratch offs per day dataframe
#this will be interesting to track for seasonality, weekends, holidays, etc,...
tickets_sold_df %>%
drop_na() %>%
mutate(dollar_per_day = tickets_per_day_since_last_scrape * ticket_cost_num) %>%
group_by(scrape_date) %>%
summarise(dollar_spend_per_day = sum(dollar_per_day))
#plot of ticket spend per day for each ticket amount
tickets_sold_df %>%
drop_na() %>%
mutate(dollar_per_day = tickets_per_day_since_last_scrape * ticket_cost_num) %>%
group_by(ticket_cost_num,scrape_date) %>%
summarise(dollar_spend_per_day = sum(dollar_per_day)) %>%
ungroup() %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = as.factor(ticket_cost_num)))+
geom_line()+geom_point(aes(shape = as.factor(ticket_cost_num)))+
scale_y_continuous(labels = scales::dollar_format())
tickets_sold_df %>%
drop_na() %>%
mutate(dollar_per_day = tickets_per_day_since_last_scrape * ticket_cost_num) %>%
group_by(ticket_cost_num,scrape_date) %>%
summarise(dollar_spend_per_day = sum(dollar_per_day))
tickets_sold_df %>%
drop_na() %>%
mutate(dollar_per_day = tickets_per_day_since_last_scrape * ticket_cost_num) %>%
group_by(ticket_cost_num,scrape_date) %>%
summarise(dollar_spend_per_day = sum(dollar_per_day)) %>% view()
daily_csv <- list.files("/Users/jennaryan/Documents/R Projects/sc lottery/daily_csv_sc",
full.names = TRUE) %>%
lapply(read_csv)
df <- bind_rows(daily_csv)
clean_df <-df %>%
select(-`...1`) %>%
relocate(game_number:game_name, .before = prize_amount) %>%
mutate(prize_amount = as.numeric(gsub(",", "",str_sub(prize_amount, start=2L, end = -1L)))) %>%
mutate(start_overall_odds = as.numeric(overall_odds)) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prizes_game = sum(total_prize)) %>%
ungroup() %>%
mutate(number_tickets = start_overall_odds * total_prizes_game) %>%
mutate(prizes_claimed = total_prize - remaining_prizes) %>%
group_by(game_number,scrape_date) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>%
mutate(start_date = mdy(start_date)) %>%
mutate(game_number = as.factor(game_number)) %>%
mutate(percent_claimed = prizes_claimed / total_prize * 100) %>%
mutate(game_age = as.numeric(scrape_date - start_date)) %>%
mutate(avg_tickets_sold_per_day = tickets_sold / game_age)
buy_out_df <- clean_df %>%
group_by(game_number,scrape_date) %>%
summarise(prize_amount_start = sum(total_prize*prize_amount),
ticket_cost_start = number_tickets[1] * ticket_price[1],
prize_amount_remain = sum(remaining_prizes*prize_amount),
ticket_cost_remain = tickets_remain[1] * ticket_price[1],
cost_to_buy_out_start = ticket_cost_start - prize_amount_start,
cost_to_buy_out_current = ticket_cost_remain - prize_amount_remain,
start_roi = (prize_amount_start / ticket_cost_start-1),
current_roi = (prize_amount_remain / ticket_cost_remain-1),
game_age = game_age[1],
game_name = game_name[1],
ticket_price = ticket_price[1]) %>%
ungroup()
avg_sold_per_day <- clean_df %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
clean_df %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()])
clean_df %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE)
clean_df %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>% view()
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date) - 1)
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE)
View(clean_df)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date) - 1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date) - 1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>% view()
clean_df %>%
group_by(scrape_date) %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date) - 1) %>%
distinct(game_number, .keep_all = TRUE)
avg_sold_per_day <- clean_df %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
clean_df %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
view()
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1)
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n() = 2)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1)
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n() = 2)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1)
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n() = 2) %>%
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n() == 2) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n() == 2)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>% view()
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n() = 2)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n() == 2)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n() == 1)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n(game_number) == 2)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(nrow() == 2)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(nrow(.) == 2)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n()>1) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n()>1)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n()>1) %>% view()
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(nrow(game_number) ==2) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(nrow(game_number) = 2) %>%
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(count(game_number) ==2 ) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(count(game_number) ==2 )
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(count()==2) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n() >1)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(n(game_number) >1) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets),
n=n())
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(nrow() == 2)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(nrow(game_number) == 2)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(row_number() == 2)
View(avg_sold_per_day)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(nrow >1)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
filter(nrow() >1)
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
group_by(game_number) %>%
filter(n()>2) %>%
ungroup() %>%
group_by(scrape_date) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
group_by(game_number) %>%
filter(n()==2)
clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
group_by(game_number) %>%
filter(n()==2) %>% view()
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
group_by(game_number) %>%
filter(n()==2) %>%
ungroup() %>%
group_by(scrape_date) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
tickets_sold_df <- clean_df %>%
select(Game_number,Game_name,scrape_date,game_age,tickets_sold,ticket_cost,ticket_cost_num) %>%
group_by(scrape_date) %>%
distinct(Game_number, .keep_all = TRUE) %>%
arrange(Game_number,scrape_date) %>%
ungroup() %>%
group_by(Game_number) %>%
mutate(sold_since_last_scrape = tickets_sold - lag(tickets_sold)) %>%
mutate(days_since_last_scrape = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_per_day_since_last_scrape = sold_since_last_scrape/days_since_last_scrape) %>%
ungroup()
#most popular game today
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
arrange(desc(tickets_per_day_since_last_scrape)) %>%
.[1,]
#tickets sold per day since last scrape for each ticket amount
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
group_by(ticket_cost_num) %>%
summarise(tickets_sold_per_day = sum(tickets_per_day_since_last_scrape)) %>%
ungroup() %>%
mutate(total_dollar_spend_on_tickets = ticket_cost_num * tickets_sold_per_day)
source("/Users/jennaryan/Documents/GitHub/best-scratch-offs/fl_data_prep.R")
tickets_sold_df <- clean_df %>%
select(Game_number,Game_name,scrape_date,game_age,tickets_sold,ticket_cost,ticket_cost_num) %>%
group_by(scrape_date) %>%
distinct(Game_number, .keep_all = TRUE) %>%
arrange(Game_number,scrape_date) %>%
ungroup() %>%
group_by(Game_number) %>%
mutate(sold_since_last_scrape = tickets_sold - lag(tickets_sold)) %>%
mutate(days_since_last_scrape = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_per_day_since_last_scrape = sold_since_last_scrape/days_since_last_scrape) %>%
ungroup()
#most popular game today
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
arrange(desc(tickets_per_day_since_last_scrape)) %>%
.[1,]
#tickets sold per day since last scrape for each ticket amount
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
group_by(ticket_cost_num) %>%
summarise(tickets_sold_per_day = sum(tickets_per_day_since_last_scrape)) %>%
ungroup() %>%
mutate(total_dollar_spend_on_tickets = ticket_cost_num * tickets_sold_per_day)
#tickets sold per day total since last scrape
tickets_sold_df %>%
filter(scrape_date == max(scrape_date)) %>%
group_by(ticket_cost_num) %>%
summarise(tickets_sold_per_day = sum(tickets_per_day_since_last_scrape)) %>%
ungroup() %>%
mutate(total_dollar_spend_on_tickets = ticket_cost_num * tickets_sold_per_day) %>%
summarise(tickets_sold_per_day = sum(tickets_sold_per_day),
total_dollar_spend_on_tickets = sum(total_dollar_spend_on_tickets))
#total spend on scratch offs per day dataframe
#this will be interesting to track for seasonality, weekends, holidays, etc,...
tickets_sold_df %>%
drop_na() %>%
mutate(dollar_per_day = tickets_per_day_since_last_scrape * ticket_cost_num) %>%
group_by(scrape_date) %>%
summarise(dollar_spend_per_day = sum(dollar_per_day))
#plot of ticket spend per day for each ticket amount
tickets_sold_df %>%
drop_na() %>%
mutate(dollar_per_day = tickets_per_day_since_last_scrape * ticket_cost_num) %>%
group_by(ticket_cost_num,scrape_date) %>%
summarise(dollar_spend_per_day = sum(dollar_per_day)) %>%
ungroup() %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = as.factor(ticket_cost_num)))+
geom_line()+geom_point(aes(shape = as.factor(ticket_cost_num)))+
scale_y_continuous(labels = scales::dollar_format())
