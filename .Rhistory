position = "topright")
library(maps)
# Create the map with the state boundaries and highlight Minnesota
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles() %>%
addPolygons(data = getStateGeoJSON(),
fillColor = ifelse(tolower(state.name) == "minnesota", "green", "gray"),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
group = "states") %>%
addLayersControl(overlayGroups = c("states"),
options = layersControlOptions(collapsed = FALSE),
position = "topright")
library(leaflet)
# Get the US state GeoJSON data
usgeojson <- system.file("examples/us-states.json", package = "leaflet")
# Create the map with the state boundaries and highlight Minnesota
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles() %>%
addGeoJSON(usgeojson,
fillColor = ifelse(tolower(properties$name) == "minnesota", "green", "gray"),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
group = "states") %>%
addLayersControl(overlayGroups = c("states"),
options = layersControlOptions(collapsed = FALSE),
position = "topright")
# Get the US state GeoJSON data
usgeojson <- system.file("examples/us-states.json", package = "leaflet")
library(leaflet)
map <- leaflet() %>%
setView(lng = -96, lat = 37.8, zoom = 4)
map
map <- map %>%
addTiles(urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
attribution = 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors')
map
map <- map %>%
addGeoJSON(minnesota, color = "red", weight = 2)
map <- map %>%
addGeoJSON(minnesota, color = "red", weight = 2)
minnesota <- geojsonio::geojson_read("https://opendata.arcgis.com/datasets/e43f303d8fa049928e024dfc7f9f4c5e_0.geojson")
library(leaflet)
# Create a map of the US
us_map <- leaflet() %>%
addTiles() %>%
setView(-98.5833, 39.8333, zoom = 4)
# Add polygons for California and Florida
us_map <- us_map %>%
addPolygons(data = statePop,
fillColor = "transparent",
weight = 2,
color = "black",
opacity = 0.7,
fillOpacity = 0.7,
group = "states",
# Define a function to highlight California and Florida in blue
highlightOptions = highlightOptions(color = "blue", weight = 3,
bringToFront = TRUE),
# Filter the data to only show California and Florida
filter = (name == "California" | name == "Florida"))
# Add a legend for the map
us_map <- us_map %>%
addLegend(pal = NULL,
values = c("California", "Florida"),
title = "Highlighted States",
position = "bottomright")
# Display the map
us_map
# Add polygons for California and Florida
us_map <- us_map %>%
addPolygons(data = statePop,
fillColor = "transparent",
weight = 2,
color = "black",
opacity = 0.7,
fillOpacity = 0.7,
group = "states",
# Define a function to highlight California and Florida in blue
highlightOptions = highlightOptions(color = "blue", weight = 3,
bringToFront = TRUE),
# Filter the data to only show California and Florida
filter = (name == "California" | name == "Florida"))
# Add polygons for California and Florida
us_map <- us_map %>%
addPolygons(data = statePop,
fillColor = "transparent",
weight = 2,
color = "black",
opacity = 0.7,
fillOpacity = 0.7,
group = "states",
# Define a function to highlight California and Florida in blue
highlightOptions = highlightOptions(color = "blue", weight = 3,
bringToFront = TRUE),
# Filter the data to only show California and Florida
filter = (name == "California" | name == "Florida"))
data("usgeojson")
data("usgeojson")
library(leaflet)
data("usgeojson")
library(geojsonio)
install.packages("geojsonio")
library(leaflet)
library(geojsonio)
# Get the GeoJSON data for the US from the US Census Bureau
us_geojson <- geojson_read("https://www2.census.gov/geo/relfiles/cenbound/cenboundcb_ua_state_20m.zip", what = "sp")
# Get the GeoJSON data for the US from the US Census Bureau
data("usgeojson")
library(maps)
library(leaflet)
# Get the latitudes and longitudes for California and Florida
california_coords <- map("state", "California", plot = FALSE)$coords
florida_coords <- map("state", "Florida", plot = FALSE)$coords
# Create a map of the US
us_map <- leaflet() %>%
addTiles() %>%
setView(-98.5833, 39.8333, zoom = 4)
# Add polygons for California and Florida
us_map <- us_map %>%
addPolygons(data = list(list(coords = california_coords)),
fillColor = "transparent",
weight = 2,
color = "blue",
opacity = 0.7,
fillOpacity = 0.7,
group = "states") %>%
addPolygons(data = list(list(coords = florida_coords)),
fillColor = "transparent",
weight = 2,
color = "blue",
opacity = 0.7,
fillOpacity = 0.7,
group = "states")
# Add a legend for the map
us_map <- us_map %>%
addLegend(pal = NULL,
values = c("California", "Florida"),
title = "Highlighted States",
position = "bottomright")
# Display the map
us_map
# Add polygons for California and Florida
us_map <- us_map %>%
addPolygons(data = list(list(coords = california_coords)),
fillColor = "transparent",
weight = 2,
color = "blue",
opacity = 0.7,
fillOpacity = 0.7,
group = "states") %>%
addPolygons(data = list(list(coords = florida_coords)),
fillColor = "transparent",
weight = 2,
color = "blue",
opacity = 0.7,
fillOpacity = 0.7,
group = "states")
library(maps)
library(leaflet)
# Create a map of the US
us_map <- leaflet() %>%
addTiles() %>%
setView(-98.5833, 39.8333, zoom = 4)
# Add polygons for each state
us_map <- us_map %>%
addPolygons(data = maps::map("state", fill = TRUE, plot = FALSE),
fillColor = "grey",
weight = 1,
color = "white",
opacity = 0.7,
fillOpacity = 0.7,
group = "states")
# Display the map
us_map
library(maps)
library(leaflet)
# Create a map of the US
us_map <- leaflet() %>%
addTiles() %>%
setView(-98.5833, 39.8333, zoom = 4)
# Add polygons for each state
us_map <- us_map %>%
addPolygons(data = maps::map("state", fill = TRUE, plot = FALSE),
fillColor = "grey",
weight = 1,
color = "white",
opacity = 0.7,
fillOpacity = 0.7,
group = "states")
# Add polygons for Alaska and Hawaii, and move them closer to the continental US
alaska_coords <- maps::map("alaska", plot = FALSE)$range$y
# Add polygons for Alaska and Hawaii, and move them closer to the continental US
alaska_coords <- maps::map("alaska", plot = FALSE)$range$y
hawaii_coords <- maps::map("hawaii", plot = FALSE)$range$x
us_map <- us_map %>%
addPolygons(data = maps::map("state", regions = c("alaska", "hawaii"), fill = TRUE, plot = FALSE),
fillColor = "grey",
weight = 1,
color = "white",
opacity = 0.7,
fillOpacity = 0.7,
group = "states",
# Move Alaska and Hawaii closer to the continental US
lat = c(alaska_coords[1], hawaii_coords[1] - 15),
lng = c(alaska_coords[2] - 30, hawaii_coords[2] + 40))
# Display the map
us_map
library(maps)
library(ggplot2)
# Get the data for US states and their centroids
us_states <- map_data("state")
# Create a map of the US states using ggplot
ggplot() +
# Add the state polygons
geom_polygon(data = us_states, aes(x = long, y = lat, group = group),
fill = "grey", color = "white", size = 0.2) +
# Add the state centroids
geom_point(data = us_states, aes(x = long, y = lat), size = 0.5) +
# Add a title and remove the legend
ggtitle("US States") +
theme(legend.position = "none")
leaflet() %>%
setView(lng = -122.431297, lat = 37.773972, zoom = 12) %>%
addTiles() %>%
addMarkers(lng = -122.431297, lat = 37.773972,
popup = "San Francisco") %>%
setMaxBounds(lng1 = -123.5, lat1 = 36.5, lng2 = -121.5, lat2 = 39) %>%
setMinZoom(10) %>%
setMaxZoom(18) %>%
addScaleBar(position = "bottomright") %>%
saveWidget("my_map.html", selfcontained = TRUE)
leaflet() %>%
setView(lng = -122.431297, lat = 37.773972, zoom = 12) %>%
addTiles() %>%
addMarkers(lng = -122.431297, lat = 37.773972,
popup = "San Francisco") %>%
setMaxBounds(lng1 = -123.5, lat1 = 36.5, lng2 = -121.5, lat2 = 39) %>%
setMinZoom(10) %>%
setMaxZoom(18) %>%
addScaleBar(position = "bottomright")
leaflet() %>%
setView(lng = -122.431297, lat = 37.773972, zoom = 12) %>%
addTiles() %>%
addMarkers(lng = -122.431297, lat = 37.773972,
popup = "San Francisco") %>%
setMaxBounds(lng1 = -123.5, lat1 = 36.5, lng2 = -121.5, lat2 = 39)
# Create a map of the US
us_map <- leaflet() %>%
addTiles() %>%
setView(-98.5833, 39.8333, zoom = 4)
# Display the map
us_map
# Create a map of the US
us_map <- leaflet() %>%
addTiles() %>%
setView(-98.5833, 39.8333, zoom = 4)
# Add a polygon for Florida
florida <- data.frame(lon = c(-87.6, -82.2, -80.0, -80.1, -82.8, -87.6),
lat = c(30.3, 30.7, 29.0, 25.8, 24.5, 30.3))
us_map <- us_map %>%
addPolygons(data = florida,
fillColor = "blue",
weight = 2,
color = "white",
opacity = 1,
fillOpacity = 0.5)
# Define the polygon data for Florida as a list
florida <- list(list(lat = c(30.3, 30.7, 29.0, 25.8, 24.5),
lng = c(-87.6, -82.2, -80.0, -80.1, -82.8)))
# Add the polygon for Florida to the map
us_map <- us_map %>%
addPolygons(data = florida,
fillColor = "blue",
weight = 2,
color = "white",
opacity = 1,
fillOpacity = 0.5)
# Create a map of the US
us_map <- leaflet() %>%
addTiles() %>%
setView(-98.5833, 39.8333, zoom = 4)
# Define the polygon data for Florida as a list
florida <- list(list(lat = c(30.3, 30.7, 29.0, 25.8, 24.5),
lng = c(-87.6, -82.2, -80.0, -80.1, -82.8)))
# Convert the list to a GeoJSON object
florida_geojson <- geojson_list(florida)
# Add the polygon for Florida to the map
us_map <- us_map %>%
addPolygons(data = florida_geojson,
fillColor = "blue",
weight = 2,
color = "white",
opacity = 1,
fillOpacity = 0.5)
geojsonio::states
leaflet(geojsonio::states) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~"red")
us_state <- geojsonio::geojson_read(states)
us_state <- states
us_state_map <- states
leaflet(us_state_map) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~"red")
leaflet(us_state_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~"red")
leaflet(us_state_map) %>%
addTiles()
leaflet(us_state_map) %>%
addTiles() %>%
addPolygons(us_state, fill = "red")
leaflet(us_state_map) %>%
addTiles() %>%
addPolygons(fill = "red")
leaflet(us_state_map) %>%
addTiles() %>%
addPolygons(fillcolor = "red")
leaflet(us_state_map) %>%
addTiles() %>%
addPolygons()
leaflet(us_state_map) %>%
addTiles()
leaflet(us_state_map) %>%
addTiles() %>%
addPolygons()
us_state_map <- geojson_read(states)
?geojson_read
us_state_map <- geojson_read(geojsonio::states)
leaflet(state) %>%
addTiles() %>%
addPolygons()
leaflet(states) %>%
addTiles() %>%
addPolygons()
library(sf)
library(plotly)
states <- read_sf("resources/us_map/US-State-Boundaries-Census-2014.shp") %>%
st_zm()
?read_sf
library(plotly)
# Load the US state data
data(state)
# Create a map of the US states
us_map <- plot_geo(state) %>%
add_trace(z = ~state.x,
locations = ~state.abb,
locationmode = "USA-states",
type = "choropleth",
colors = "Blues") %>%
layout(geo = list(scope = "usa"))
# Display the map
us_map
# Load the US state data
data(state)
# Create a map of the US states
us_map <- plot_geo(state) %>%
add_trace(z = ~state.x,
locations = ~state.abb,
locationmode = "USA-states",
type = "choropleth",
colors = "Blues") %>%
layout(geo = list(scope = "usa"))
# Load the US state data
state <- data(state)
# Load the US state data
data(state)
# Load the US state data
data(state)
force(state.x77)
force(state.area)
View(state.x77)
state
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig <- plot_geo(g)
plot_geo()
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
lakecolor = toRGB('white')
)
plot_geo() %>%
layout(geo = g)
library(plotly)
library(crosstalk)
p1 <- df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = state))+
geom_line()+
geom_point()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())+
labs(y = "$ Spend per Day",
x = "Date")
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center")
source("/Users/jennaryan/Documents/GitHub/all_lotto_states/all_states_analysis.R")
library(plotly)
library(crosstalk)
p1 <- df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = state))+
geom_line()+
geom_point()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())+
labs(y = "$ Spend per Day",
x = "Date")
p2 <-ggplotly(p1, tooltip = c("color","x","y"))
p2c <-htmltools::div(p2, align = "center")
p2c
library(plotly)
library(crosstalk)
library(htmltools)
library(htmlwidgets)
state_spend <- df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day))
state_highlight <- highlight_key(state_spend,~state,"Select A State")
sp <- state_highlight %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day))+
geom_point()+
geom_line()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())+
labs(y = "$ Spend per Day",
x = "Date")
select <- highlight(
ggplotly(sp, tooltip = "state"),
selectize = TRUE, persistent = FALSE, color = "red", width="100%")
htmltools::div(
style = "display: flex; flex-direction: row; align-items: center;",
select
)
density <- state.x77[, "Population"] / state.x77[, "Area"]
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
lakecolor = toRGB('white')
)
plot_geo() %>%
layout(geo = g)
