summarise(avg_daily = mean(dollar_spend_per_day)) %>%
mutate(state = state_convert$name[which(state_convert$abb %in% state)] %>% tolower()) %>%
mutate(url = "google.com")
state_convert <- data.frame(abb = state.abb, name = state.name)
state_data <- state_spend %>% group_by(state) %>%
summarise(avg_daily = mean(dollar_spend_per_day)) %>%
mutate(state = state_convert$name[which(state_convert$abb %in% state)] %>% tolower()) %>%
mutate(url = "google.com")
# Load US state map data
us_states <- map("state", fill = TRUE, plot = FALSE)
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
"<strong>", us_states$names, "</strong>",
"<br>Daily Spend: ", round(state_data$avg_daily[match(us_states$names, tolower(state_data$state))], 0) %>%
scales::label_dollar()(.)
)
# Create a leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
url = state_data$url) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
leaflet_map %>% onRender(js_click_function)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
url = state_data$url) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
url = state_data$url,
# Bind the popup to display the state data
popup = popup_content) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
options = layerOptions(url = state_map_data$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
options = layerOptions(url = state_data$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
options = options(url = state_data$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
leaflet_map %>% onRender(js_click_function)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
options = options(url = state_data$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
leaflet_map %>% onRender(js_click_function)
links_test <- leaflet_map %>% onRender(js_click_function)
htmlwidgets::saveWidget(links_test,"test.html")
getwd()
js_click_function <- '
function on_click_handler(event) {
var url = event.target.options.url;
if (url) {
window.open(url, "_blank");
}
}
'
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
options = options(url = state_data$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
links_test <- leaflet_map %>% onRender(js_click_function)
links_test
js_click_function <- '
function (el, x) {
var map_element = this;
map_element.eachLayer(function (layer) {
if (typeof layer.feature !== "undefined") {
layer.on("click", function (e) {
var url = e.target.feature.properties.url;
if (url) {
window.open(url, "_blank");
}
});
}
});
}
'
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$names,
group = "states",
options = pathOptions(url = state_data$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
js_click_function <- '
function (el, x) {
var map_element = this;
map_element.eachLayer(function (layer) {
if (typeof layer.feature !== "undefined") {
layer.on("click", function (e) {
var url = e.target.feature.properties.url;
if (url) {
window.open(url, "_blank");
}
});
}
});
}
'
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$names,
group = "states",
options = pathOptions(url = state_data$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
links_test <- leaflet_map %>% onRender(js_click_function)
htmlwidgets::saveWidget(links_test,"test.html")
library(dplyr)
library(maps)
library(leaflet)
library(scales)
library(stringr)
library(htmlwidgets)
library(htmltools)
js_click_function <- '
function (el, x) {
var map_element = this;
map_element.eachLayer(function (layer) {
if (typeof layer.feature !== "undefined") {
layer.on("click", function (e) {
var url = e.target.feature.properties.url;
if (url) {
window.open(url, "_blank");
}
});
}
});
}
'
state_convert <- data.frame(abb = state.abb, name = state.name)
state_data <- state_spend %>% group_by(state) %>%
summarise(avg_daily = mean(dollar_spend_per_day)) %>%
mutate(state = state_convert$name[which(state_convert$abb %in% state)] %>% tolower()) %>%
mutate(url = "google.com")
# Load US state map data
us_states <- map("state", fill = TRUE, plot = FALSE)
# Merge the us_states and state_data to have URL properties
us_states <- fortify(us_states, region = "names") %>%
left_join(state_data, by = c("id" = "state"))
View(state_data)
View(us_states)
# Merge the us_states and state_data to have URL properties
us_states <- fortify(us_states, region = "names") %>%
left_join(state_data, by = c("name" = "state"))
# Merge the us_states and state_data to have URL properties
us_states <- fortify(us_states, region = "names") %>%
left_join(state_data, by = c("id" = "state"))
state_data
fortify(us_states, region = "names")
us_states <- fortify(us_states, region = "names")
us_states
# Merge the us_states and state_data to have URL properties
us_states <- fortify(us_states, region = "names") %>%
left_join(state_data, by = c("region" = "state"))
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
"<strong>", us_states$id, "</strong>",
"<br>Daily Spend: ", round(us_states$avg_daily, 0) %>%
scales::label_dollar()(.)
)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(!is.na(us_states$avg_daily), "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$id,
group = "states",
options = pathOptions(url = us_states$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(!is.na(us_states$avg_daily), "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$region,
group = "states",
options = pathOptions(url = us_states$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(!is.na(us_states$avg_daily), "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$region,
group = "states",
options = pathOptions(url = us_states$url)) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
us_states
ibrary(dplyr)
library(dplyr)
library(maps)
library(leaflet)
library(scales)
library(stringr)
library(htmlwidgets)
library(htmltools)
state_convert <- data.frame(abb = state.abb, name = state.name)
state_data <- state_spend %>% group_by(state) %>%
summarise(avg_daily = mean(dollar_spend_per_day)) %>%
mutate(state = state_convert$name[which(state_convert$abb %in% state)] %>% tolower()) %>%
mutate(url = "google.com")
# Load US state map data
us_states <- map("state", fill = TRUE, plot = FALSE)
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
"<strong>", us_states$names, "</strong>",
"<br>Daily Spend: ", round(state_data$avg_daily[match(us_states$names, tolower(state_data$state))], 0) %>%
scales::label_dollar()(.)
)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$names,
group = "states") %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
leaflet_map
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$names,
group = "states",
# Set the onclick behavior to open a URL in a new tab
onclick = htmlwidgets::JS(paste0("window.open(", toJSON(state_data$url), ", '_blank')"))
) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$names,
group = "states",
# Set the onclick behavior to open a URL in a new tab
onclick = htmlwidgets::JS(paste0("window.open(", toJSON(state_data$url), ", '_blank')"))
) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$names,
group = "states") %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Add the event listener for clicks on the polygons
leaflet_map %>%
onRender(jsCode = paste0("
function(el, x) {
var polygons = document.getElementsByClassName('leaflet-interactive');
for (var i = 0; i < polygons.length; i++) {
var polygon = polygons[i];
polygon.addEventListener('click', function(e) {
", js_code, ";
});
}
}
"))
# Add the event listener for clicks on the polygons
leaflet_map %>%
onRender(jsCode = paste0("
function(el, x) {
var polygons = document.getElementsByClassName('leaflet-interactive');
for (var i = 0; i < polygons.length; i++) {
var polygon = polygons[i];
polygon.addEventListener('click', function(e) {
", js_code, ";
});
}
}
"))
# Define the JavaScript code for opening a new tab with the URL
js_code <- paste0("window.open('", state_data$url, "', '_blank')")
# Add the event listener for clicks on the polygons
leaflet_map %>%
onRender(jsCode = paste0("
function(el, x) {
var polygons = document.getElementsByClassName('leaflet-interactive');
for (var i = 0; i < polygons.length; i++) {
var polygon = polygons[i];
polygon.addEventListener('click', function(e) {
", js_code, ";
});
}
}
"))
# Add the event listener for clicks on the polygons
test_map <- leaflet_map %>%
onRender(jsCode = paste0("
function(el, x) {
var polygons = document.getElementsByClassName('leaflet-interactive');
for (var i = 0; i < polygons.length; i++) {
var polygon = polygons[i];
polygon.addEventListener('click', function(e) {
", js_code, ";
});
}
}
"))
htmlwidgets::saveWidget(test_map, "test.html")
state_data <- state_spend %>% group_by(state) %>%
summarise(avg_daily = mean(dollar_spend_per_day)) %>%
mutate(state = state_convert$name[which(state_convert$abb %in% state)] %>% tolower()) %>%
mutate(url = "https://www.google.com/?client=safari")
# Load US state map data
us_states <- map("state", fill = TRUE, plot = FALSE)
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
"<strong>", us_states$names, "</strong>",
"<br>Daily Spend: ", round(state_data$avg_daily[match(us_states$names, tolower(state_data$state))], 0) %>%
scales::label_dollar()(.)
)
# Define the JavaScript code for opening a new tab with the URL
js_code <- paste0("window.open('", state_data$url, "', '_blank')")
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$names,
group = "states") %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Add the event listener for clicks on the polygons
test_map <- leaflet_map %>%
onRender(jsCode = paste0("
function(el, x) {
var polygons = document.getElementsByClassName('leaflet-interactive');
for (var i = 0; i < polygons.length; i++) {
var polygon = polygons[i];
polygon.addEventListener('click', function(e) {
", js_code, ";
});
}
}
"))
htmlwidgets::saveWidget(test_map, "test.html")
View(state_data)
test_map <- leaflet_map %>%
onRender(jsCode = paste0("
function(el, x) {
var polygons = document.getElementsByClassName('leaflet-interactive');
for (var i = 0; i < polygons.length; i++) {
var polygon = polygons[i];
polygon.addEventListener('click', function(e) {
", js_code, ";
});
}
}
"))
test_map
js_code <- paste0("
var polygons = document.getElementsByClassName('leaflet-interactive');
for (var i = 0; i < polygons.length; i++) {
var polygon = polygons[i];
polygon.addEventListener('click', function(e) {
window.open('", state_data$url, "', '_blank');
});
}
")
addCustomJS(js_code)
addCustomJS(js_code)
onStaticRenderComplete(leaflet_map, js_code)
# Create a leaflet map
leaflet_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states,
fillColor = ifelse(us_states$names %in% state_data$state, "orange", "white"),
color = "grey", weight = 1,
opacity = 1, fillOpacity = .6,
# Bind the popup to display the state data
popup = popup_content,
layerId = ~us_states$names,
group = "states") %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
onStaticRenderComplete(leaflet_map, js_code)
js_code <- paste0("
var polygons = document.getElementsByClassName('leaflet-interactive');
for (var i = 0; i < polygons.length; i++) {
var polygon = polygons[i];
polygon.addEventListener('click', function(e) {
window.open('", state_data$url, "', '_blank');
});
}
")
onStaticRenderComplete(leaflet_map, js_code)
leaflet_map %>%
onRender(JS(js_code))
