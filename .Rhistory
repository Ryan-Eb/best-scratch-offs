summarise(aspd = mean(tickets_sold_per_day)) %>%
.[,2] %>%
as.numeric() %>%
round(0)
total_amount_remain <- df %>%
filter(state == st) %>%
filter(scrape_date == max(scrape_date)) %>%
drop_na() %>%
summarise(tpr = sum(prize_amount * prizes_remaining)) %>%
as.numeric() %>%
round(0)
top_remaining <- df %>%
filter(state == st) %>%
filter(scrape_date == max(scrape_date)) %>%
drop_na() %>%
filter(prize_amount >= 1000000) %>%
summarise(npr = sum(prizes_remaining)) %>%
as.numeric()
ggplot2::map_data("state","texas") %>%
ggplot(aes(long,lat))
ggplot2::map_data("state","connecticut") %>%
ggplot(aes(long,lat))+
geom_polygon(fill = "white", color = "black", linewidth=2)
x1 = -73
y1 = 41
TX_logo <- ggplot2::map_data("state","connecticut") %>%
ggplot(aes(long,lat))+
geom_polygon(fill = "white", color = "black", linewidth=2)+
annotate("rect",
xmin = x1+.4,
xmax = x1+2.4,
ymin = y1+.4,
ymax = y1+2.4,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = x1+.2,
xmax = x1+2.2,
ymin = y1+.2,
ymax = y1+2.2,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = x1,
xmax = x1+2,
ymin = y1,
ymax = y1+2,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.1,
ymax = y1+.3)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.4,
ymax = y1+.6)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.7,
ymax = y1+.9)+
annotate("text",
x = x1+1,
y = y1 +1.3,
label = "$ $ $ $",
size = 4)+
annotate("text",
x = x1+1,
y = y1 +1.7,
label = "WINNER",
size = 4)+
annotate("text",
x = x1+1.3,
y = y1+2.9,
label = "best-scratch-offs.com/tx",
size = 5,
fontface = "bold")+
coord_quickmap()+
theme_bw()+
theme(panel.grid = element_blank(),
panel.border = element_blank(),
line = element_blank(),
text = element_blank(),
plot.margin = margin(0,0,0,0))
x1 = -73
y1 = 41
CT_logo <- ggplot2::map_data("state","connecticut") %>%
ggplot(aes(long,lat))+
geom_polygon(fill = "white", color = "black", linewidth=2)+
annotate("rect",
xmin = x1+.4,
xmax = x1+2.4,
ymin = y1+.4,
ymax = y1+2.4,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = x1+.2,
xmax = x1+2.2,
ymin = y1+.2,
ymax = y1+2.2,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = x1,
xmax = x1+2,
ymin = y1,
ymax = y1+2,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.1,
ymax = y1+.3)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.4,
ymax = y1+.6)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.7,
ymax = y1+.9)+
annotate("text",
x = x1+1,
y = y1 +1.3,
label = "$ $ $ $",
size = 4)+
annotate("text",
x = x1+1,
y = y1 +1.7,
label = "WINNER",
size = 4)+
annotate("text",
x = x1+1.3,
y = y1+2.9,
label = "best-scratch-offs.com/tx",
size = 5,
fontface = "bold")+
coord_quickmap()+
theme_bw()+
theme(panel.grid = element_blank(),
panel.border = element_blank(),
line = element_blank(),
text = element_blank(),
plot.margin = margin(0,0,0,0))
CT_logo
#datafrome for topprize tracker and unused chart
df %>%
filter(state == st) %>%
filter(scrape_date == max(scrape_date)) %>%
filter(prize_amount >= 1e6) %>%
filter(prizes_remaining > 0 ) %>%
select(game_number,ticket_price,prize_amount,prizes_remaining) %>%
left_join(game_names %>% filter(state == st), by = "game_number") %>%
select(-state) %>%
relocate(game_name, .after = game_number) %>%
arrange(desc(prize_amount)) %>%
mutate(ticket_price = scales::label_dollar()(ticket_price)) %>%
mutate(prize_amount = scales::label_dollar()(prize_amount)) %>%
DT::datatable(colnames = c("Game Number", "Game Name", "Ticket Price", "Prize Amount", "Prizes Remaining"),
rownames = FALSE,
options = list(dom = "t",
columnDefs = list(list(className = 'dt-center', targets = 0:4))))
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center")
source("/Users/jennaryan/Documents/GitHub/all_lotto_states/all_states_analysis.R")
st = "CT"
avg_sold_per_day <- tsd %>%
filter(state == st) %>%
summarise(aspd = mean(tickets_sold_per_day)) %>%
.[,2] %>%
as.numeric() %>%
round(0)
total_amount_remain <- df %>%
filter(state == st) %>%
filter(scrape_date == max(scrape_date)) %>%
drop_na() %>%
summarise(tpr = sum(prize_amount * prizes_remaining)) %>%
as.numeric() %>%
round(0)
top_remaining <- df %>%
filter(state == st) %>%
filter(scrape_date == max(scrape_date)) %>%
drop_na() %>%
filter(prize_amount >= 1000000) %>%
summarise(npr = sum(prizes_remaining)) %>%
as.numeric()
#datafrome for topprize tracker and unused chart
df %>%
filter(state == st) %>%
filter(scrape_date == max(scrape_date)) %>%
filter(prize_amount >= 1e6) %>%
filter(prizes_remaining > 0 ) %>%
select(game_number,ticket_price,prize_amount,prizes_remaining) %>%
left_join(game_names %>% filter(state == st), by = "game_number") %>%
select(-state) %>%
relocate(game_name, .after = game_number) %>%
arrange(desc(prize_amount)) %>%
mutate(ticket_price = scales::label_dollar()(ticket_price)) %>%
mutate(prize_amount = scales::label_dollar()(prize_amount)) %>%
DT::datatable(colnames = c("Game Number", "Game Name", "Ticket Price", "Prize Amount", "Prizes Remaining"),
rownames = FALSE,
options = list(dom = "t",
columnDefs = list(list(className = 'dt-center', targets = 0:4))))
df %>%
filter(state == st) %>%
filter(scrape_date == max(scrape_date)) %>%
filter(prize_amount >= .5e6) %>%
filter(prizes_remaining > 0 ) %>%
select(game_number,ticket_price,prize_amount,prizes_remaining) %>%
left_join(game_names %>% filter(state == st), by = "game_number") %>%
select(-state) %>%
relocate(game_name, .after = game_number) %>%
arrange(desc(prize_amount)) %>%
mutate(ticket_price = scales::label_dollar()(ticket_price)) %>%
mutate(prize_amount = scales::label_dollar()(prize_amount)) %>%
DT::datatable(colnames = c("Game Number", "Game Name", "Ticket Price", "Prize Amount", "Prizes Remaining"),
rownames = FALSE,
options = list(dom = "t",
columnDefs = list(list(className = 'dt-center', targets = 0:4))))
x1 = -71
y1 = 41
CT_logo <- ggplot2::map_data("state","connecticut") %>%
ggplot(aes(long,lat))+
geom_polygon(fill = "white", color = "black", linewidth=2)+
annotate("rect",
xmin = x1+.4,
xmax = x1+2.4,
ymin = y1+.4,
ymax = y1+2.4,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = x1+.2,
xmax = x1+2.2,
ymin = y1+.2,
ymax = y1+2.2,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = x1,
xmax = x1+2,
ymin = y1,
ymax = y1+2,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.1,
ymax = y1+.3)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.4,
ymax = y1+.6)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.7,
ymax = y1+.9)+
annotate("text",
x = x1+1,
y = y1 +1.3,
label = "$ $ $ $",
size = 4)+
annotate("text",
x = x1+1,
y = y1 +1.7,
label = "WINNER",
size = 4)+
annotate("text",
x = x1+1.3,
y = y1+2.9,
label = "best-scratch-offs.com/ct",
size = 5,
fontface = "bold")+
coord_quickmap()+
theme_bw()+
theme(panel.grid = element_blank(),
panel.border = element_blank(),
line = element_blank(),
text = element_blank(),
plot.margin = margin(0,0,0,0))
CT_logo
source("/Users/jennaryan/Documents/GitHub/all_lotto_states/all_states_analysis.R")
df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = state))+
geom_line()+
geom_point()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())
```{r echo=FALSE,warning=FALSE}
source("/Users/jennaryan/Documents/GitHub/all_lotto_states/all_states_analysis.R")
df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = state))+
geom_line()+
geom_point()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())
source("/Users/jennaryan/Documents/GitHub/all_lotto_states/all_states_analysis.R")
df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = state))+
geom_line()+
geom_point()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())
source("/Users/jennaryan/Documents/GitHub/all_lotto_states/all_states_analysis.R")
df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = state))+
geom_line()+
geom_point()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())
df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day))
library(plotly)
p1 <- df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = state))+
geom_line()+
geom_point()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())
plotly(p1)
ggplotly(p1)
library(plotly)
p1 <- df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = state))+
geom_line()+
geom_point()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())
ggplotly(p1)
ggplotly(p1, tooltip = color)
ggplotly(p1, tooltip = "color")
ggplotly(p1, tooltip = c("color","y"))
p1 <- df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
ggplot(aes(x = scrape_date, y = dollar_spend_per_day, color = state))+
geom_line()+
geom_point()+
theme_bw()+
scale_y_continuous(labels = scales::label_dollar())+
labs(y = "$ Spend per Day",
x = "Date")
ggplotly(p1, tooltip = c("color","y"))
install.packages("htmltools")
p2 <-ggplotly(p1, tooltip = c("color","y"))
p2c <-htmltools::div(p2, align = "center")
p2c
p2 <-ggplotly(p1, tooltip = c("color","x","y"))
p2c <-htmltools::div(p2, align = "center")
p2c
