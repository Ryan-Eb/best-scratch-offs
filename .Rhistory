rename(prizes_claimed = `No. Prizes Claimed`) %>%
mutate(total_prize = as.numeric(str_replace_all(total_prize,",",""))) %>%
mutate(prizes_claimed = str_replace_all(prizes_claimed,"---", "0")) %>%
mutate(prizes_claimed = as.numeric(str_replace_all(prizes_claimed,",",""))) %>%
mutate(remaining_prizes = total_prize - prizes_claimed) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prize_game = sum(total_prize)) %>%
mutate(start_overall_odds = number_tickets / total_prize_game) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>% view()
df %>%
select(-`...1`) %>%
mutate(Amount = as.numeric(gsub(",", "",str_sub(Amount, start=2L, end = -1L)))) %>%
rename(prize_amount = Amount) %>%
rename(total_prize = `No. in Game*`) %>%
rename(prizes_claimed = `No. Prizes Claimed`) %>%
mutate(total_prize = as.numeric(str_replace_all(total_prize,",",""))) %>%
mutate(prizes_claimed = str_replace_all(prizes_claimed,"---", "0")) %>%
mutate(prizes_claimed = as.numeric(str_replace_all(prizes_claimed,",",""))) %>%
mutate(remaining_prizes = total_prize - prizes_claimed) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prize_game = sum(total_prize)) %>%
mutate(start_overall_odds = number_tickets / total_prize_game) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>% view()
df %>%
select(-`...1`) %>%
mutate(Amount = as.numeric(gsub(",", "",str_sub(Amount, start=2L, end = -1L)))) %>%
rename(prize_amount = Amount) %>%
rename(total_prize = `No. in Game*`) %>%
rename(prizes_claimed = `No. Prizes Claimed`) %>%
mutate(total_prize = as.numeric(str_replace_all(total_prize,",",""))) %>%
mutate(prizes_claimed = str_replace_all(prizes_claimed,"---", "0")) %>%
mutate(prizes_claimed = as.numeric(str_replace_all(prizes_claimed,",",""))) %>%
mutate(remaining_prizes = total_prize - prizes_claimed) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prize_game = sum(total_prize)) %>%
mutate(start_overall_odds = number_tickets / total_prize_game) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>%
mutate(start_date = mdy(`Start Date`)) %>%
mutate(game_number = as.factor(game_number)) %>%
mutate(percent_claimed = prizes_claimed / total_prize * 100) %>%
mutate(game_age = as.numeric(scrape_date - start_date)) %>%
mutate(avg_tickets_sold_per_day = tickets_sold / game_age) %>%
mutate(ticket_cost_num = as.numeric(str_sub(ticket_price, start = 2L, end = -1L)))
clean_df <-
df %>%
select(-`...1`) %>%
mutate(Amount = as.numeric(gsub(",", "",str_sub(Amount, start=2L, end = -1L)))) %>%
rename(prize_amount = Amount) %>%
rename(total_prize = `No. in Game*`) %>%
rename(prizes_claimed = `No. Prizes Claimed`) %>%
mutate(total_prize = as.numeric(str_replace_all(total_prize,",",""))) %>%
mutate(prizes_claimed = str_replace_all(prizes_claimed,"---", "0")) %>%
mutate(prizes_claimed = as.numeric(str_replace_all(prizes_claimed,",",""))) %>%
mutate(remaining_prizes = total_prize - prizes_claimed) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prize_game = sum(total_prize)) %>%
mutate(start_overall_odds = number_tickets / total_prize_game) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>%
mutate(start_date = mdy(`Start Date`)) %>%
mutate(game_number = as.factor(game_number)) %>%
mutate(percent_claimed = prizes_claimed / total_prize * 100) %>%
mutate(game_age = as.numeric(scrape_date - start_date)) %>%
mutate(avg_tickets_sold_per_day = tickets_sold / game_age) %>%
mutate(ticket_cost_num = as.numeric(str_sub(`Ticket Price`, start = 2L, end = -1L)))
clean_df <-
df %>%
select(-`...1`) %>%
mutate(Amount = as.numeric(gsub(",", "",str_sub(Amount, start=2L, end = -1L)))) %>%
rename(prize_amount = Amount) %>%
rename(total_prize = `No. in Game*`) %>%
rename(prizes_claimed = `No. Prizes Claimed`) %>%
mutate(total_prize = as.numeric(str_replace_all(total_prize,",",""))) %>%
mutate(prizes_claimed = str_replace_all(prizes_claimed,"---", "0")) %>%
mutate(prizes_claimed = as.numeric(str_replace_all(prizes_claimed,",",""))) %>%
mutate(remaining_prizes = total_prize - prizes_claimed) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prize_game = sum(total_prize)) %>%
mutate(start_overall_odds = number_tickets / total_prize_game) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>%
mutate(start_date = mdy(`Start Date`)) %>%
mutate(game_number = as.factor(game_number)) %>%
mutate(percent_claimed = prizes_claimed / total_prize * 100) %>%
mutate(game_age = as.numeric(scrape_date - start_date)) %>%
mutate(avg_tickets_sold_per_day = tickets_sold / game_age) %>%
mutate(ticket_cost_num = as.numeric(str_sub(`Ticket Price`, start = 2L, end = -1L))) %>% view
clean_df <- df %>%
select(-`...1`) %>%
mutate(Amount = as.numeric(gsub(",", "",str_sub(Amount, start=2L, end = -1L)))) %>%
rename(prize_amount = Amount) %>%
rename(total_prize = `No. in Game*`) %>%
rename(prizes_claimed = `No. Prizes Claimed`) %>%
mutate(total_prize = as.numeric(str_replace_all(total_prize,",",""))) %>%
mutate(prizes_claimed = str_replace_all(prizes_claimed,"---", "0")) %>%
mutate(prizes_claimed = as.numeric(str_replace_all(prizes_claimed,",",""))) %>%
mutate(remaining_prizes = total_prize - prizes_claimed) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prize_game = sum(total_prize)) %>%
mutate(start_overall_odds = number_tickets / total_prize_game) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>%
mutate(start_date = mdy(`Start Date`)) %>%
mutate(game_number = as.factor(game_number)) %>%
mutate(percent_claimed = prizes_claimed / total_prize * 100) %>%
mutate(game_age = as.numeric(scrape_date - start_date)) %>%
mutate(avg_tickets_sold_per_day = tickets_sold / game_age) %>%
mutate(ticket_cost_num = as.numeric(str_sub(`Ticket Price`, start = 2L, end = -1L)))
buy_out_df <- clean_df %>%
group_by(game_number,scrape_date) %>%
summarise(prize_amount_start = sum(total_prize*prize_amount),
ticket_cost_start = number_tickets[1] * ticket_cost_num[1],
prize_amount_remain = sum(remaining_prizes*prize_amount),
ticket_cost_remain = tickets_remain[1] * ticket_cost_num[1],
cost_to_buy_out_start = ticket_cost_start - prize_amount_start,
cost_to_buy_out_current = ticket_cost_remain - prize_amount_remain,
start_roi = (prize_amount_start / ticket_cost_start-1),
current_roi = (prize_amount_remain / ticket_cost_remain-1),
game_age = game_age[1],
game_name = game_name[1],
ticket_price = ticket_price[1]) %>%
ungroup()
View(clean_df)
clean_df <- df %>%
select(-`...1`) %>%
mutate(Amount = as.numeric(gsub(",", "",str_sub(Amount, start=2L, end = -1L)))) %>%
rename(prize_amount = Amount) %>%
rename(total_prize = `No. in Game*`) %>%
rename(prizes_claimed = `No. Prizes Claimed`) %>%
mutate(total_prize = as.numeric(str_replace_all(total_prize,",",""))) %>%
mutate(prizes_claimed = str_replace_all(prizes_claimed,"---", "0")) %>%
mutate(prizes_claimed = as.numeric(str_replace_all(prizes_claimed,",",""))) %>%
mutate(remaining_prizes = total_prize - prizes_claimed) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prize_game = sum(total_prize)) %>%
mutate(start_overall_odds = number_tickets / total_prize_game) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>%
mutate(start_date = mdy(`Start Date`)) %>%
mutate(game_number = as.factor(game_number)) %>%
mutate(percent_claimed = prizes_claimed / total_prize * 100) %>%
mutate(game_age = as.numeric(scrape_date - start_date)) %>%
mutate(avg_tickets_sold_per_day = tickets_sold / game_age) %>%
mutate(ticket_cost_num = as.numeric(str_sub(`Ticket Price`, start = 2L, end = -1L))) %>%
rename(game_name = `Game Name`)
buy_out_df <- clean_df %>%
group_by(game_number,scrape_date) %>%
summarise(prize_amount_start = sum(total_prize*prize_amount),
ticket_cost_start = number_tickets[1] * ticket_cost_num[1],
prize_amount_remain = sum(remaining_prizes*prize_amount),
ticket_cost_remain = tickets_remain[1] * ticket_cost_num[1],
cost_to_buy_out_start = ticket_cost_start - prize_amount_start,
cost_to_buy_out_current = ticket_cost_remain - prize_amount_remain,
start_roi = (prize_amount_start / ticket_cost_start-1),
current_roi = (prize_amount_remain / ticket_cost_remain-1),
game_age = game_age[1],
game_name = game_name[1],
ticket_price = ticket_price[1]) %>%
ungroup()
clean_df <- df %>%
select(-`...1`) %>%
mutate(Amount = as.numeric(gsub(",", "",str_sub(Amount, start=2L, end = -1L)))) %>%
rename(prize_amount = Amount) %>%
rename(total_prize = `No. in Game*`) %>%
rename(prizes_claimed = `No. Prizes Claimed`) %>%
mutate(total_prize = as.numeric(str_replace_all(total_prize,",",""))) %>%
mutate(prizes_claimed = str_replace_all(prizes_claimed,"---", "0")) %>%
mutate(prizes_claimed = as.numeric(str_replace_all(prizes_claimed,",",""))) %>%
mutate(remaining_prizes = total_prize - prizes_claimed) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prize_game = sum(total_prize)) %>%
mutate(start_overall_odds = number_tickets / total_prize_game) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>%
mutate(start_date = mdy(`Start Date`)) %>%
mutate(game_number = as.factor(game_number)) %>%
mutate(percent_claimed = prizes_claimed / total_prize * 100) %>%
mutate(game_age = as.numeric(scrape_date - start_date)) %>%
mutate(avg_tickets_sold_per_day = tickets_sold / game_age) %>%
mutate(ticket_cost_num = as.numeric(str_sub(`Ticket Price`, start = 2L, end = -1L))) %>%
rename(game_name = `Game Name`) %>%
rename(ticket_price = `Ticket Price`)
buy_out_df <- clean_df %>%
group_by(game_number,scrape_date) %>%
summarise(prize_amount_start = sum(total_prize*prize_amount),
ticket_cost_start = number_tickets[1] * ticket_cost_num[1],
prize_amount_remain = sum(remaining_prizes*prize_amount),
ticket_cost_remain = tickets_remain[1] * ticket_cost_num[1],
cost_to_buy_out_start = ticket_cost_start - prize_amount_start,
cost_to_buy_out_current = ticket_cost_remain - prize_amount_remain,
start_roi = (prize_amount_start / ticket_cost_start-1),
current_roi = (prize_amount_remain / ticket_cost_remain-1),
game_age = game_age[1],
game_name = game_name[1],
ticket_price = ticket_price[1]) %>%
ungroup()
##not updated yet for NC
avg_sold_per_day <- clean_df %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets = sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
total_amount_remain <- buy_out_df %>%
filter(scrape_date == max(scrape_date)) %>%
drop_na() %>%
summarise(prizes_remain = sum(prize_amount_remain)) %>%
as.numeric() %>%
round(0)
greater_500_remain <- clean_df %>%
filter(scrape_date == max(scrape_date)) %>%
filter(prize_amount >= 500) %>%
summarise(remain_500 = sum(remaining_prizes)) %>%
as.numeric() %>%
round(0)
best_games_tbl <- buy_out_df %>%
filter(scrape_date == max(scrape_date)) %>%
drop_na() %>%
group_by(ticket_price) %>%
summarise(game_name = game_name[1],
`ROI %` = scales::label_percent()(max(current_roi)),
`Return on 1$` =scales::label_dollar()(1+1*max(current_roi))) %>%
mutate(ticket_cost_num = as.numeric(str_sub(ticket_price, start = 2L, end = -1L))) %>%
arrange(ticket_cost_num) %>%
mutate(game_name = str_replace_all(game_name, "[^a-zA-Z0-9]", " ")) %>%
select(-ticket_cost_num)
View(best_games_tbl)
ggplot2::map_data("state","texas") %>%
ggplot(aes(long,lat))+
geom_polygon(fill = "white", color = "black", linewidth=2)
x1 = -100
y1 = 30
TX_logo <- ggplot2::map_data("state","texas") %>%
ggplot(aes(long,lat))+
geom_polygon(fill = "white", color = "black", linewidth=2)+
annotate("rect",
xmin = x1+.4,
xmax = x1+2.4,
ymin = y1+.4,
ymax = y1+2.4,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = x1+.2,
xmax = x1+2.2,
ymin = y1+.2,
ymax = y1+2.2,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = x1,
xmax = x1+2,
ymin = y1,
ymax = y1+2,
fill = "white",
color = "black",
linetype = 2)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.1,
ymax = y1+.3)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.4,
ymax = y1+.6)+
annotate("rect",
xmin = c(x1+.1, x1+.5, x1+.9, x1+1.3, x1+1.7),
xmax = c(x1+.3, x1+.7, x1+1.1, x1+1.5, x1+1.9),
ymin = y1+.7,
ymax = y1+.9)+
annotate("text",
x = x1+1,
y = y1 +1.3,
label = "$ $ $ $",
size = 5)+
annotate("text",
x = x1+1,
y = y1 +1.7,
label = "WINNER",
size = 5)+
annotate("text",
x = x1+1.3,
y = y1+2.9,
label = "best-scratch-offs.com/nc",
size = 5,
fontface = "bold")+
coord_quickmap()+
theme_bw()+
theme(panel.grid = element_blank(),
panel.border = element_blank(),
line = element_blank(),
text = element_blank(),
plot.margin = margin(0,0,0,0))
TX_logo
TX_logo
TX_logo
#datafrome for topprize tracker and unused chart
top_pize_tracker <- clean_df %>%
mutate(game_name = str_replace_all(game_name, "[^a-zA-Z0-9]", " ")) %>%
filter(percent_claimed < 100) %>%
filter(prize_amount >= 2e6)
top_prize_plot1 <- top_pize_tracker %>%
ggplot(aes(x = game_age, y = percent_claimed, color = game_name ))+
geom_point()+
geom_label_repel(data = top_pize_tracker %>% filter(scrape_date==max(scrape_date)), aes(label = scales::label_dollar()(prize_amount)),
show.legend = FALSE)+
theme_bw()+
labs(x = "Age of Game - Days",
y = "% of Winning Tickets Claimed",
title = "% of Winning Tickets Claimed",
caption = "*prizes $2mil or greater")+
theme(legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
plot.caption = element_text(face = "bold"))+
guides(color = guide_legend(nrow = 3))
top_prize_plot1
top_prize_plot2 <- top_pize_tracker %>%
ggplot(aes(x = game_age, y = remaining_prizes, color = game_name ))+
geom_point()+
geom_label_repel(data = top_pize_tracker %>% filter(scrape_date==max(scrape_date)),aes(label = scales::label_dollar()(prize_amount)),
show.legend = FALSE)+
scale_y_continuous(breaks = scales::pretty_breaks())+
theme_bw()+
labs(x = "Age of Game - Days",
y = "# of Winning Tickets Remaining",
title = "Winning Tickets Remaining",
caption = "*prizes $2mil or greater")+
theme(legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
plot.caption = element_text(face = "bold"))+
guides(color = guide_legend(nrow = 3))
top_prize_plot2
#datafrome for topprize tracker and unused chart
top_pize_tracker <- clean_df %>%
mutate(game_name = str_replace_all(game_name, "[^a-zA-Z0-9]", " ")) %>%
filter(percent_claimed < 100) %>%
filter(prize_amount >= 5e6)
top_prize_plot1 <- top_pize_tracker %>%
ggplot(aes(x = game_age, y = percent_claimed, color = game_name ))+
geom_point()+
geom_label_repel(data = top_pize_tracker %>% filter(scrape_date==max(scrape_date)), aes(label = scales::label_dollar()(prize_amount)),
show.legend = FALSE)+
theme_bw()+
labs(x = "Age of Game - Days",
y = "% of Winning Tickets Claimed",
title = "% of Winning Tickets Claimed",
caption = "*prizes $2mil or greater")+
theme(legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
plot.caption = element_text(face = "bold"))+
guides(color = guide_legend(nrow = 3))
top_prize_plot1
top_prize_plot2 <- top_pize_tracker %>%
ggplot(aes(x = game_age, y = remaining_prizes, color = game_name ))+
geom_point()+
geom_label_repel(data = top_pize_tracker %>% filter(scrape_date==max(scrape_date)),aes(label = scales::label_dollar()(prize_amount)),
show.legend = FALSE)+
scale_y_continuous(breaks = scales::pretty_breaks())+
theme_bw()+
labs(x = "Age of Game - Days",
y = "# of Winning Tickets Remaining",
title = "Winning Tickets Remaining",
caption = "*prizes $5mil or greater")+
theme(legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
plot.caption = element_text(face = "bold"))+
guides(color = guide_legend(nrow = 3))
top_prize_plot2
top_pize_tracker <- clean_df %>%
mutate(game_name = str_replace_all(game_name, "[^a-zA-Z0-9]", " ")) %>%
filter(percent_claimed < 100) %>%
filter(prize_amount >= 3e6)
top_prize_plot2 <- top_pize_tracker %>%
ggplot(aes(x = game_age, y = remaining_prizes, color = game_name ))+
geom_point()+
geom_label_repel(data = top_pize_tracker %>% filter(scrape_date==max(scrape_date)),aes(label = scales::label_dollar()(prize_amount)),
show.legend = FALSE)+
scale_y_continuous(breaks = scales::pretty_breaks())+
theme_bw()+
labs(x = "Age of Game - Days",
y = "# of Winning Tickets Remaining",
title = "Winning Tickets Remaining",
caption = "*prizes $3mil or greater")+
theme(legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
plot.caption = element_text(face = "bold"))+
guides(color = guide_legend(nrow = 3))
top_prize_plot2
source("~/Documents/R Projects/mn lottery/scratch off.R", echo=TRUE)
source("~/Documents/R Projects/ms lottery/ms scratch off.R", echo=TRUE)
View(game_data)
source("~/Documents/R Projects/nc lottery/nc_scratch_offs.R", echo=TRUE)
View(game_data)
library(tidyverse)
library(lubridate)
source("~/Documents/R Projects/sc lottery/sc_scrach_offs.R", echo=TRUE)
View(game_data)
library(tidyverse)
library(lubridate)
library(ggrepel)
daily_csv <- list.files("/Users/jennaryan/Documents/R Projects/sc lottery/daily_csv_sc",
full.names = TRUE) %>%
lapply(read_csv)
df <- bind_rows(daily_csv)
clean_df <-df %>%
select(-`...1`) %>%
relocate(game_number:game_name, .before = prize_amount) %>%
mutate(prize_amount = as.numeric(gsub(",", "",str_sub(prize_amount, start=2L, end = -1L)))) %>%
mutate(start_overall_odds = as.numeric(overall_odds)) %>%
group_by(game_number,scrape_date) %>%
mutate(total_prizes_game = sum(total_prize)) %>%
ungroup() %>%
mutate(number_tickets = start_overall_odds * total_prizes_game) %>%
mutate(prizes_claimed = total_prize - remaining_prizes) %>%
group_by(game_number,scrape_date) %>%
mutate(tickets_sold = sum(prizes_claimed) * start_overall_odds) %>%
ungroup() %>%
mutate(tickets_remain = number_tickets - tickets_sold) %>%
mutate(current_odds = tickets_remain / remaining_prizes) %>%
mutate(start_date = mdy(start_date)) %>%
mutate(game_number = as.factor(game_number)) %>%
mutate(percent_claimed = prizes_claimed / total_prize * 100) %>%
mutate(game_age = as.numeric(scrape_date - start_date)) %>%
mutate(avg_tickets_sold_per_day = tickets_sold / game_age)
buy_out_df <- clean_df %>%
group_by(game_number,scrape_date) %>%
summarise(prize_amount_start = sum(total_prize*prize_amount),
ticket_cost_start = number_tickets[1] * ticket_price[1],
prize_amount_remain = sum(remaining_prizes*prize_amount),
ticket_cost_remain = tickets_remain[1] * ticket_price[1],
cost_to_buy_out_start = ticket_cost_start - prize_amount_start,
cost_to_buy_out_current = ticket_cost_remain - prize_amount_remain,
start_roi = (prize_amount_start / ticket_cost_start-1),
current_roi = (prize_amount_remain / ticket_cost_remain-1),
game_age = game_age[1],
game_name = game_name[1],
ticket_price = ticket_price[1]) %>%
ungroup()
avg_sold_per_day <- clean_df %>%
filter(scrape_date == max(scrape_date) | scrape_date == max(scrape_date)-1) %>%
group_by(scrape_date) %>%
distinct(game_number, .keep_all = TRUE) %>%
group_by(game_number) %>%
filter(n()==2) %>%
ungroup() %>%
group_by(scrape_date) %>%
summarise(tickets_remain = sum(tickets_remain),
number_tickets=sum(number_tickets)) %>%
arrange(scrape_date) %>%
summarise(days_since_last_scrape = as.numeric(scrape_date[n()]-scrape_date[n()-1]),
number_tickets_diff = number_tickets[n()] - number_tickets[n()-1],
tickets_sold_since_last_scrape = number_tickets_diff + tickets_remain[n()-1] - tickets_remain[n()]) %>%
summarise(avg_per_day = tickets_sold_since_last_scrape/days_since_last_scrape) %>%
as.numeric() %>%
round(0)
total_amount_remain <- buy_out_df %>%
filter(scrape_date == max(scrape_date)) %>%
drop_na() %>%
summarise(prizes_remain = sum(prize_amount_remain)) %>%
as.numeric() %>%
round(0)
greater_500_remain <- clean_df %>%
filter(scrape_date == max(scrape_date)) %>%
filter(prize_amount >= 500) %>%
summarise(remain_500 = sum(remaining_prizes)) %>%
as.numeric() %>%
round(0)
best_games_tbl <- buy_out_df %>%
filter(scrape_date == max(scrape_date)) %>%
drop_na() %>%
group_by(ticket_price) %>%
summarise(game_name = game_name[1],
`ROI %` = scales::label_percent()(max(current_roi)),
`Return on 1$` =scales::label_dollar()(1+1*max(current_roi))) %>%
mutate(ticket_cost_num = as.numeric(str_sub(ticket_price, start = 2L, end = -1L))) %>%
arrange(ticket_cost_num) %>%
#mutate(game_name = str_replace_all(game_name, "[^a-zA-Z0-9]", " ")) %>%
select(-ticket_cost_num)
