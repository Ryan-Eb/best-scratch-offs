fillOpacity = 0.7,
bringToFront = TRUE),
label = ~paste0(region, ": $", round(avg_dollar_spend_per_day))) %>%
addLegend(pal = colorNumeric(palette = "Reds", domain = states_data$avg_dollar_spend_per_day),
values = states_data$avg_dollar_spend_per_day,
title = "Dollar spend per day",
position = "bottomright")
View(states_data)
# Create a lookup table to map state abbreviations to full names
state_names <- data.frame(state_abb = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"),
state_name = c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"))
# Join the data with the lookup table
data_with_names <- left_join(state_spend_summary, state_names, by = c("state" = "state_abb"))
View(data_with_names)
# Join the data with the lookup table
data_by_state <- left_join(state_spend_summary, state_names, by = c("state" = "state_abb"))
# Get the shapefile for the United States from the maps package
states <- map_data("state")
# Join the data by state with the shapefile
states_data <- left_join(states, data_by_state, by = c("region" = "state_name"))
# Create the leaflet map
# Create a lookup table that maps state abbreviations to full state names
state_lookup <- data.frame(state = state.abb, name = state.name)
# Join the data by state abbreviation with the lookup table
data_by_state <- data_by_state %>%
left_join(state_lookup, by = c("state" = "state"))
# Get the shapefile for the United States from the maps package
states <- map_data("state")
# Join the data by full state name with the shapefile
states_data <- left_join(state_spend_summary, data_by_state, by = c("region" = "name"))
View(states)
View(data_by_state)
# Join the data by full state name with the shapefile
states_data <- left_join(state_spend_summary, data_by_state, by = c("region" = "name"))
library(leaflet)
library(htmltools)
library(maps)
# Load US state map data
us_states <- map("state", fill = TRUE, plot = FALSE)
# Create a data frame with some example data to be displayed on the map
state_data <- data.frame(
state = state.abb,
value = rnorm(length(state.abb))
)
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
"<strong>", us_states$names, "</strong>",
"<br>Value: ", round(state_data$value[match(us_states$names, state.abb)], 2)
)
# Create a leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states, fillColor = "white", color = "gray", weight = 1,
opacity = 1, fillOpacity = 0.7,
# Bind the popup to display the state data
popup = popup_content) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
View(states_data)
# Load US state map data
us_states <- map("state", fill = TRUE, plot = FALSE)
# Create a data frame with some example data to be displayed on the map
state_data <- data.frame(
state = state.abb,
value = rnorm(length(state.abb))
)
View(state_data)
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
"<strong>", us_states$names, "</strong>",
"<br>Value: ", round(state_data$value[match(us_states$names, state.abb)], 2)
)
# Create a leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states, fillColor = "white", color = "gray", weight = 1,
opacity = 1, fillOpacity = 0.7,
# Bind the popup to display the state data
popup = popup_content) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
View(state_data)
View(us_states)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center")
source("/Users/jennaryan/Documents/GitHub/all_lotto_states/all_states_analysis.R")
state_spend <- df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day))
state_spend_summary <- df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
group_by(state) %>%
summarise(avg_daily_spend = mean(dollar_spend_per_day))
View(state_spend_summary)
# Create a data frame with some example data to be displayed on the map
state_spend_summary %>%
state.abb
# Create a data frame with some example data to be displayed on the map
state_spend_summary %>%
state.abb()
state.abb
state.name
library(leaflet)
library(htmltools)
library(maps)
# Load US state map data
us_states <- map("state", fill = TRUE, plot = FALSE)
# Create a data frame with some example data to be displayed on the map
state_spend_summary
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
"<strong>", us_states$names, "</strong>",
"<br>Value: ", 2
)
# Create a leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states, fillColor = "white", color = "gray", weight = 1,
opacity = 1, fillOpacity = 0.7,
# Bind the popup to display the state data
popup = popup_content) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
state_lookup <- data.frame(state.abb = state.abb, state.name = state.name, stringsAsFactors = FALSE)
# Merge the data frame with the lookup table
state_spend_data <- merge(state_spend_summary, state_lookup, by.x = "state", by.y = "state.abb")
View(state_spend_data)
View(us_states)
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
"<strong>", us_states$names, "</strong>",
"<br>Value: ", round(state_spend_data$avg_daily_spend[match(us_states$names, state.name)], 2))
# Create a leaflet map
leaflet() %>%
# Create a leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states, fillColor = "white", color = "gray", weight = 1,
opacity = 1, fillOpacity = 0.7,
# Bind the popup to display the state data
popup = popup_content) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
# Define the content to be displayed when hovering over a state
popup_content <- paste0(
"<strong>", us_states$names, "</strong>",
"<br>Value: ", round(state_spend_data$avg_daily_spend[match(us_states$names, state.name)], 2))
popup_content
# Create a leaflet map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = us_states, fillColor = "white", color = "gray", weight = 1,
opacity = 1, fillOpacity = 0.7,
# Bind the popup to display the state data
popup = popup_content) %>%
# Set the initial view to show the entire US
fitBounds(lng1 = -128, lat1 = 23, lng2 = -65, lat2 = 50)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center")
source("/Users/jennaryan/Documents/GitHub/all_lotto_states/all_states_analysis.R")
state_spend_summary <- df %>%
drop_na() %>%
group_by(state,game_number,scrape_date) %>%
summarise(number_tickets = sum(total_prizes) * mean(overall_odds),
tickets_sold = sum(prizes_claimed) * mean(overall_odds)) %>%
left_join(ticket_prices, by = c("state","game_number")) %>%
mutate(dollar_spend = tickets_sold * ticket_price) %>%
group_by(state,game_number) %>%
arrange(game_number,scrape_date) %>%
mutate(diff_tickets_sold = tickets_sold - lag(tickets_sold)) %>%
mutate(diff_dollar_spend = dollar_spend - lag(dollar_spend)) %>%
mutate(diff_days = as.numeric(scrape_date - lag(scrape_date))) %>%
mutate(tickets_sold_per_day = diff_tickets_sold / diff_days) %>%
mutate(dollar_spend_per_day = diff_dollar_spend / diff_days) %>%
ungroup() %>%
group_by(state,scrape_date) %>%
arrange(scrape_date) %>%
drop_na() %>%
summarise(dollar_spend_per_day = sum(dollar_spend_per_day)) %>%
group_by(state) %>%
summarise(avg_daily_spend = mean(dollar_spend_per_day))
View(state_spend_summary)
clipr::write_clip(state_spend_summary)
# Define the data table
data_table <- state_spend_summary
# Add the US states geojson data (you may replace this with a local file if needed)
us_states <- "https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json"
leaflet() %>%
addTiles() %>%
addGeoJSON(url = us_states,
style = list(fillColor = "transparent", weight = 1, color = "black"),
onEachFeature = htmlwidgets::JS(
'
function(feature, layer) {
layer.bindTooltip(feature.properties.name, {direction: "auto"});
layer.on("mouseover", function() {
var state = feature.properties.name;
var abbr = feature.properties.postal;
var spend = data_table[data_table$state == abbr, "avg_daily_spend"];
if(spend) {
var tooltipText = state + "<br>Average Daily Spend: $" + Number(spend).toLocaleString("en-US", {minimumFractionDigits: 2});
layer.setTooltipContent(tooltipText);
}
});
}
')) %>%
setView(-96.5, 38.7, 4) # Set the center and zoom level for the map
# Load the required libraries
library(leaflet)
library(dplyr)
# Define the data table
data_table <- state_spend_summary
# Add the US states geojson data (you may replace this with a local file if needed)
us_states <- "https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json"
# Define JavaScript code for onEachFeature
js_code <- "
"
js_code <- "
function onEachFeature(feature, layer) {
layer.bindTooltip(feature.properties.name, {direction: 'auto'});
layer.on('mouseover', function() {
var state = feature.properties.name;
var abbr = feature.properties.postal;
var spend = data_table[data_table$state == abbr, 'avg_daily_spend'];
if(spend) {
var tooltipText = state + '<br>Average Daily Spend: $' + Number(spend).toLocaleString('en-US', {minimumFractionDigits: 2});
layer.setTooltipContent(tooltipText);
}
});
}
"
# Create the map
leaflet() %>%
addTiles() %>%
addGeoJSON(url = us_states,
onEachFeature = htmlwidgets::JS(js_code),
options = leafletOptions(style = list(fillColor = "transparent", weight = 1, color = "black"))) %>%
setView(-96.5, 38.7, 4) # Set the center and zoom level for the map
# Load the required libraries
library(leaflet)
library(dplyr)
# Define the data table
data_table <- state_spend_summary
# Add the US states geojson data (you may replace this with a local file if needed)
us_states <- "https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json"
# Define JavaScript code for onEachFeature
js_code <- "
js_code <- "
function onEachFeature(feature, layer) {
js_code <- "
function onEachFeature(feature, layer) {
layer.bindTooltip(feature.properties.name, {direction: 'auto'});
layer.on('mouseover', function() {
var state = feature.properties.name;
var abbr = feature.properties.postal;
var spend = data_table[data_table$state == abbr, 'avg_daily_spend'];
if(spend) {
var tooltipText = state + '<br>Average Daily Spend: $' + Number(spend).toLocaleString('en-US', {minimumFractionDigits: 2});
layer.setTooltipContent(tooltipText);
}
});
}
"
# Create the map
leaflet() %>%
addTiles() %>%
addGeoJSONv2(url = us_states,
onEachFeature = htmlwidgets::JS(js_code),
options = leafletOptions(style = list(fillColor = "transparent", weight = 1, color = "black"))) %>%
setView(-96.5, 38.7, 4) # Set the center and zoom level for the map
# Create a data frame with state names and average daily spend
data <- state_spend_summary
# Define the color palette to use
pal <- colorNumeric(palette = "YlOrRd", domain = data$avg_daily_spend)
# Create the map with the state boundaries and hover information
leaflet() %>%
addTiles() %>%
addPolygons(data = getData("state"),
fillColor = ~pal(avg_daily_spend),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
onEachFeature = paste0("<strong>", data$state, "</strong><br/>Avg Daily Spend: $", round(data$avg_daily_spend, 2))) %>%
addLegend(pal = pal, values = data$avg_daily_spend,
position = "bottomright",
title = "Average Daily Spend",
labFormat = labelFormat(suffix = "M", digits = 1, big.mark = ","))
View(data)
View(data)
library(leaflet)
# Create the map with the default tile layer and view centered on the US
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles()
# Create a data frame with state names and average daily spend
data <- data.frame(state = c("AR", "CA", "CT", "FL", "IL", "LA", "MA", "NC", "NY", "TX"),
avg_daily_spend = c(1428755.81, 19821318.974, 1954708.965625, 19764479.7692727,
5460013.129, 533143.455, 11189204.5325, 7854726.01500002,
11660692.29375, 18842983.4275),
highlight = c(rep("no", 3), rep("yes", 3), rep("no", 4)))
# Define the color palette to use
pal <- colorNumeric(palette = "YlOrRd", domain = data$avg_daily_spend)
# Create the map with the state boundaries and color each state based on its avg_daily_spend
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles() %>%
addPolygons(data = getData("state"),
fillColor = ~pal(avg_daily_spend),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
group = "states") %>%
addLegend(pal = pal, values = data$avg_daily_spend,
position = "bottomright",
title = "Average Daily Spend",
labFormat = labelFormat(suffix = "M", digits = 1, big.mark = ",")) %>%
addLayersControl(overlayGroups = c("states"),
options = layersControlOptions(collapsed = FALSE),
position = "topright") %>%
addMarkers(lng = -mean(range(-94, -90)), lat = mean(range(33, 36)),
data = subset(data, highlight == "yes"),
popup = paste0("<strong>", data$state, "</strong><br/>Avg Daily Spend: $", round(data$avg_daily_spend, 2)))
library(leaflet)
library(leaflet.extras)
install.packages("leaflet.extras")
library(leaflet)
library(leaflet.extras)
# Create a data frame with state names and average daily spend
data <- data.frame(state = c("AR", "CA", "CT", "FL", "IL", "LA", "MA", "NC", "NY", "TX"),
avg_daily_spend = c(1428755.81, 19821318.974, 1954708.965625, 19764479.7692727,
5460013.129, 533143.455, 11189204.5325, 7854726.01500002,
11660692.29375, 18842983.4275),
highlight = c(rep("no", 3), rep("yes", 3), rep("no", 4)))
# Define the color palette to use
pal <- colorNumeric(palette = "YlOrRd", domain = data$avg_daily_spend)
# Create the map with the state boundaries and color each state based on its avg_daily_spend
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles() %>%
addPolygons(data = getStateGeoJSON(),
fillColor = ~pal(avg_daily_spend),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
group = "states") %>%
addLegend(pal = pal, values = data$avg_daily_spend,
position = "bottomright",
title = "Average Daily Spend",
labFormat = labelFormat(suffix = "M", digits = 1, big.mark = ",")) %>%
addLayersControl(overlayGroups = c("states"),
options = layersControlOptions(collapsed = FALSE),
position = "topright") %>%
addMarkers(lng = -mean(range(-94, -90)), lat = mean(range(33, 36)),
data = subset(data, highlight == "yes"),
popup = paste0("<strong>", data$state, "</strong><br/>Avg Daily Spend: $", round(data$avg_daily_spend, 2)))
library(leaflet)
library(leaflet.extras)
library(maps)
# Create a data frame with state names and average daily spend
data <- data.frame(state = c("AR", "CA", "CT", "FL", "IL", "LA", "MA", "NC", "NY", "TX"),
avg_daily_spend = c(1428755.81, 19821318.974, 1954708.965625, 19764479.7692727,
5460013.129, 533143.455, 11189204.5325, 7854726.01500002,
11660692.29375, 18842983.4275),
highlight = c(rep("no", 3), rep("yes", 3), rep("no", 4)))
# Define the color palette to use
pal <- colorNumeric(palette = "YlOrRd", domain = data$avg_daily_spend)
# Create the map with the state boundaries and color each state based on its avg_daily_spend
# Create the map with the state boundaries and color each state based on its avg_daily_spend
leaflet() %>%
# Create the map with the state boundaries and color each state based on its avg_daily_spend
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles() %>%
addPolygons(data = getStateGeoJSON(),
fillColor = ~pal(avg_daily_spend),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
group = "states") %>%
addLegend(pal = pal, values = data$avg_daily_spend,
position = "bottomright",
title = "Average Daily Spend",
labFormat = labelFormat(suffix = "M", digits = 1, big.mark = ",")) %>%
addLayersControl(overlayGroups = c("states"),
options = layersControlOptions(collapsed = FALSE),
position = "topright") %>%
addMarkers(lng = -mean(range(-94, -90)), lat = mean(range(33, 36)),
data = subset(data, highlight == "yes"),
popup = paste0("<strong>", data$state, "</strong><br/>Avg Daily Spend: $", round(data$avg_daily_spend, 2)))
library(leaflet)
library(maps)
# Create the map with the state boundaries and highlight Minnesota
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles() %>%
addPolygons(data = getStateGeoJSON(),
fillColor = ifelse(tolower(state.name) == "minnesota", "green", "gray"),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
group = "states") %>%
addLayersControl(overlayGroups = c("states"),
options = layersControlOptions(collapsed = FALSE),
position = "topright")
# Create the map with the state boundaries and highlight Minnesota
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles() %>%
addPolygons(data = getStateGeoJSON(),
fillColor = ifelse(tolower(state.name) == "minnesota", "green", "gray"),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
group = "states") %>%
addLayersControl(overlayGroups = c("states"),
options = layersControlOptions(collapsed = FALSE),
position = "topright")
library(maps)
# Create the map with the state boundaries and highlight Minnesota
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles() %>%
addPolygons(data = getStateGeoJSON(),
fillColor = ifelse(tolower(state.name) == "minnesota", "green", "gray"),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
group = "states") %>%
addLayersControl(overlayGroups = c("states"),
options = layersControlOptions(collapsed = FALSE),
position = "topright")
library(leaflet)
# Get the US state GeoJSON data
usgeojson <- system.file("examples/us-states.json", package = "leaflet")
# Create the map with the state boundaries and highlight Minnesota
leaflet() %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addTiles() %>%
addGeoJSON(usgeojson,
fillColor = ifelse(tolower(properties$name) == "minnesota", "green", "gray"),
fillOpacity = 0.8,
color = "#444444",
weight = 1,
smoothFactor = 0.5,
group = "states") %>%
addLayersControl(overlayGroups = c("states"),
options = layersControlOptions(collapsed = FALSE),
position = "topright")
# Get the US state GeoJSON data
usgeojson <- system.file("examples/us-states.json", package = "leaflet")
library(leaflet)
map <- leaflet() %>%
setView(lng = -96, lat = 37.8, zoom = 4)
map
map <- map %>%
addTiles(urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
attribution = 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors')
map
map <- map %>%
addGeoJSON(minnesota, color = "red", weight = 2)
map <- map %>%
addGeoJSON(minnesota, color = "red", weight = 2)
minnesota <- geojsonio::geojson_read("https://opendata.arcgis.com/datasets/e43f303d8fa049928e024dfc7f9f4c5e_0.geojson")
